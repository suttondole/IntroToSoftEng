Lecture 5
3/3/2021

					Software Architecture Styles



Architectural design is how a software system should be organized; its overall structure and the interfaces it supports
-This includes its context, module(& class) structure and interfaces
in addition to the link between requirements engineering and detailed desing
-this might be represented with use cases, sequence, activity, and state diagrams showing how the system delivers its functionality

An early stage of agile processes often includes design of an overall systems architecture
-Redoing a system architecture is usually costly because it affeects so many components in the system
-Providing some organization to the development up front can save considerable rework at later stages

Example found in repo

To create an architecture:
-one models what the system will do
-one identifies the system's interfaces and constraints
-one architects the system to satisfy NFR's like performance, security, correctness, safety, availability, usability and maintainability
-to do this, one must identify software components and relationships, based on customer's requirements
-These form the content used for the software system models and for the primary architecture of the software system

When we design or architect a system, we never know enough!
-requirements keep changing
-until we code, the impact of constraints is not yet felt or known
-the system's intended environment might not be known
Using proven architectural styles and patterns helps
-directs us to reuse known means for achieving our aims
-frees us to focus on the unknowns
Patterns and styles are tools for the architect and designer

MVC pattern

Description: Separates presentation and interaction from the system data. The system is
structured into three logical components that interact with each other. The
Model component manages the system data and associated operations on
that data. The View component defines and manages how the data is
presented to the user. The Controller component manages user interaction
(e.g., key presses, mouse clicks, etc.) and passes these interactions to the
View and the Model. See earlier figure.

Example: Previous figure shows the architecture of a web-based application system
organized using the MVC pattern.

When used: Used when there are multiple ways to view and interact with data. Also used
when the future requirements for interaction and presentation of data are
unknown.

Advantages: Allows the data to change independently of its representation and vice versa.
Supports presentation of the same data in different ways with changes made
in one representation shown in all of them.

Disadvantages: Can involve additional code and code complexity when the data model and
interactions are simple.

Value of the MVC:
-it removes the viewing dependency from the model
-it keeps the view reusable without modification even when the controller changes
-the view displays the model's data and sends usere actions to the controller
-the model is the data and does nothing with it
-this reduces complexity, adds flexibility, and reusability

Real-time and embedded systems
-software is used to control a wide range of systems from simple domestic machines, through game controllers, to vehicles, and entire manufacturing plants
-such software must react to events generated by the hardware and often, issue control signals in response to these events
-the software for these systems is embedded in system hardware, often in read only memory, and usually responds in real time to events from the systems's environment
-responsiveness in real time is the critical difference between embedded systems and other software systems, such as information systems, web based systems, or personal software systems

Characteristics of embedded software
-embedded systems generally run continuously and do not terminate
-interactions with the system's environment are unpredictable
-there may be physical limitations that affect the design of a system
-direct hardware interaction may be necessary
-issues of safety and reliability may dominate the system design
-these systems use different architecture patterns than those typically used by information systems

Some words on timing analysis:

The correctness of a real time system depends not just on the correctness of its outputs but also on the time at which these outputs were produces
In a timing analysis you can calculate how often each process in the system must be executed to ensure that all inputs are processes and all system responses produced in a timely way
The results of a timing analysis are used to decide how frequently each process should execute and how these processes should be scheduled by the real time operating system
The factors examined includes
-deadlines, the times by which stimuli must be processed and system responds
-frequency, how often a process must execute to surely meet its deadlines
-execution time, the time required to process a stimulus and respond

Pipe and filter architecture(example found in repo)
-functional transformations process their inputs to produce outputs
-sometimes referred to as a pipe and filter model(as in UNIX shell)
-variants of this approach are very common. When transformations are sequential, this is a batch sequential model which is extensively used in data processing systems
-Not suitable for interactive systems but used in both information and embedded systems

Repository architecture(example found in repo)
Sub-systems must exchange data. This may be done in two ways:
-shared data is held in a central database or repository and may be accessed by all sub systems
-each sub system maintains its own database and passes data explicitly to other sub systems
When large amounts of data are to be shared, the repository model of sharing is most commonly used since this is an efficient data sharing mechanism

Rule based architecture
-AI and language translation systems often use variants of the repository architecture
-knowledge sources and/or knowledge bases are used to determine how the program will react to input(the state of data determine the reaction)

Examples of application types

Data processing applications e.g. billing system
-data driven applications that process data in batches without explicit user intervention during the processing
Transaction processing applications, e.g. reservation system
-data centered applications that process user requests and update information in a system database
Event processing systems, e.g. an alarm system
-applications where the system actions depend on interpreting events from the system's environment
Language processing systems, e.g. compiler or interpreter
-applications where the users intentions are specified in a formal language that is processed and interpreted by the system

Transaction processing systems(structure found in repo)
-process user requests for information from a database or requests to update the database
-from a user perspective and transaction is any coherent sequence of operations that satisfy a goal. for example - find the times of flights from london to paris
-users make asynchronous requests for the service which are then processed by a transaction manager

Information systems architecture(structure found in repo)
-information systems have a generic architecture that can be organized as a layered architecture
-these are transaction based systems as interaction with these systems generally involves database transactions
-layers include the user interface, user communications, information retrieval, and system database

Web based information systems
-information and resource management systems are now usually web based systems where the user interfaces are implemented using a web browser
-the web server is responsible for all user communication, with the user interface implemented using a web browser
-the application server is responsible for implemented application specific logic as well as information storage and retrieval requests
-the database server moves information to and form the database and handles transaction management

Language processing systems(structure found in repo)
-accept a natural or artificial language as input and generate some other representation of that language
-may include an interpreter to act on the instructions in the language that is being processed
-used in situations where the easiest way to solve a problem is to describe an algorithm or describe the system data


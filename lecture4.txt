Lecture 4
2/24/2021
						Software Modeling and Design

We typically use graphical modeling:
-facilitates discussion about an existing or proposed software system(MOdels need not be complete or completely accurate for this)
-documents all or part of an existing software system (models need not be complete but should be accurate)
-provides a detailed software description that can be used to generate a system implementation (models must be complete and accurate)
For software, the graphical notation most often used is unified modeling langage
-the use case diagram is part of uml

Some UML diagrams:
-use case, interactions between system and environment
-activity, shows activities involved in a process or in data processing
-sequence, shows interactions between actors and the system and between system components
-state, shows how the system reacts to internal and external events
-class, shows the object classes in the sysxtem and the relationship between these classes

Context models are used to illustrate the operational context of a system, they show what lies outside the system boundaries
The position of the system boundary has a profound effect on sys requirements
Social/organizational concerns may affect the decision on where to position sys boundaries
A context model is a static view (see repo for examples)

Sequence diagrams(see repo for example)
Part of the UML and are used to model the interactions among the actors and the objects(software entities/modules that know things and or how to do things)
Shows the sequence of interactions that take place during a particular use case or use case instance
Objects and actors involved are listed along the top of the diagram, with a dotted line drawn vertically from these. when interactions involve an object or actor, the dotted line becomes a rectangle, called a lifeline(the actor/object comes to life)
Interactions between actors/objects are indicated by annotated arrows

Key elements of a sequence diagram
-Object/Actor constructs go across the top
-Each object has a lifeline - a dashed descending line
-Lifelines are active(become rectangles) when the object is involved in an interaction
-Interactions should proceed accordingly to time, beginning on the left and moving right, top moving down
-Responding actions are dashed horizontal lines


Behavioral models
captures dynamic behavior of a system as it is executing. They show what happens or what should happen when a system responds to a stimulus from its environment
You can thing of these stimuli as being two types:
-Data: some data arrives that has to be processed by the system
-Events: some event happens that triggers system processing. Events may have associated data, although this is not always the case
A procedure call can be thought of as an event

State machine diagrams(example in repo)
-models behavior of the system in response to external and internal events
-show the system's responses to stimuli so are often used for modelling real-time systems
-shows system states as nodes and events as arcs between these nodes. when an event happens, the system moves from one state to another
-integral part of the UML and are used to represent state machine models

Class diagrams
-used when developing an object oriented system model to show the classes in a system and the associations between these classes
-An object class can be thought of as a general definition of one kind of system object, one that knows things and knows how to do things
-an association is a link between classes that indicates that thereis some relationship between these classes
-When you are developming models during the early stages of the software engineering process, objects often represent something in the real world, such as a patient, prescription, doctor, etc.

Generalization
-technique that we use to manage complexity
-rather than learn the detailed characteristics of every entity that we experience, we place these entities in more general classes(animals, cars, houses, transactions, etc.) and learn the characteristics of these classes
-this allows us to inger that different members of these classes have some common characteristics e.g. squirrels and rats are rodents
(hierarchy/visualization in repo)

Summary
-modeling offers abstract views of what the software is and what it will do based on requirements
-UML is widely used for software system modeling
-Software system structures
